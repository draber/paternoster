/// Setup a panel
/// @param {String} $side
/// @return {Map} $panel
@function getPanel($side) {
	 
	// merge default panel on skeleton
	$panel: map-merge($skeletonPanel, map-get($defaultPanels, $side));

	// merge custom panel
	@if(map-has-key($panels, $side)) {		
		$panel: map-merge($panel, map-get($panels, $side));
	}

	// execute 
	$panel: setupShadow($panel);
	$panel: setupImages($panel);
	$panel: setupSeparator($panel);
	@return  $panel;
}


/// Setup the shadow layer
/// @param {Map} $panel
/// @return {Map} $panel
@function setupShadow($panel) {

	$shadow: '';

	@if(map-get($panel, 'shadow') != false) {
		$shadow: map-get($panel, 'shadow');
	}

	@if($shadow != '' and str-index($shadow, 'gradient') == null) {
		$shadow: linear-gradient(#{$shadow}); 
	}

	$panel: map-merge($panel, ( shadow: $shadow ));

	@return $panel;
}


/// Setup images including shadow layer and multiple positions, if any
/// @param {Map} $panel
/// @return {Map} $panel
@function setupImages($panel){	

	$finalImages: ();

	$image: map-get($panel, 'image');
	$images: map-get($panel, 'images');
	$shadow: map-get($panel, 'shadow');
	$positions: map-get($panel, 'positions');
	$posLen: length($positions);

	@if($image != ''){
		$images: append($images, $image);
	}

	@if($shadow != ''){
		$finalImages: append($finalImages, $shadow);
	}

  	@each $image in $images {

    	$i: index($images, $image);    	
  		$image: url(#{$image});
  		@if($i <= $posLen) {
  			$image: $image + ' ' + nth($positions, $i);
  		}

  		$finalImages: append($finalImages, $image);
  	}

  	$panel: map-remove($panel, 'shadow', 'images', 'positions');
  	$panel: map-merge($panel, ( image: list-implode(', ', $finalImages) )); 

	@return $panel;
} 


/// Insert a separator in case there is position and size
/// @param {Map} $panel
/// @return {Map} $panel
@function setupSeparator($panel) {

	$position:  map-get($panel, 'position');
	$size:      map-get($panel, 'size');
	$separator: '';

	@if($size != '' and $position == '')	{
		$position: 'top left'
	}

	@if($size != '')	{
		$separator: '/';
	}

  	$panel: map-merge($panel, (
		position: $position,
		size: $size,
		separator: $separator
	)); 

	@return $panel;
}


/// Generate background value based on configuration
/// @param {String} $side
@mixin background($side) {

	$panel: getPanel($side);

	$background: list-implode(' ', (		
		map-get($panel, 'color'),
		map-get($panel, 'image'),
		map-get($panel, 'repeat'),
		map-get($panel, 'attachment'),
		map-get($panel, 'position'),
		map-get($panel, 'separator'),
		map-get($panel, 'size'),
		map-get($panel, 'origin'),
		map-get($panel, 'clip')
	));

	@if($background != '') {
		background: $background;
	}
}
