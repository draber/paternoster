@import './inc/bootstrap';
@import './inc/base';
@import './inc/keyframes';

[data-room-theme] {
	/// Walls

	width: 100vw;
	height: 100vh;
	overflow: hidden;
	position: relative;
	@include perspective(50%, (100 - (m('eyeY') / m('roomY') * 100)) * 1%, 250vh);

	& > .back {
		height: 100vh;
		width: 200vw;
		left: -50%;
		@include vendor-prefix(transform, translateZ(vh('roomZ', '-')), property, $vendorPrefixes);
	}

	& > .top, & > .bottom {
		width: 200%;
		left: -50%;
	}

	& > .top {
		height: vh('roomZ');
	}

	& > .bottom {
		height: calc(#{vh('roomZ')} + #{vh('apertureZ')});
	}

	/// Base board
	footer {
		bottom: 0;
		position: absolute;
		height: vh('baseBoardHeight');
		@include vendor-prefix(transform, translateZ(vh('roomZ', '-')), property, $vendorPrefixes);
		box-shadow: 0 1px 1px 0 black(.35);
		&:nth-of-type(1) {
			width: calc(100vw - #{vh('baseBoardLargeWidth')});
			left: -50vw;
		}
		&:nth-of-type(2) {
			width: vh('baseBoardSmallWidth');
			left: calc(50vw - #{vh('baseBoardSmallOffset')});
		}
		&:nth-of-type(3) {
			width: calc(100vw - #{vh('baseBoardLargeWidth')});
			right: -50vw;
		}
	}

	/// Aperture
	a {
		width: vh('apertureX');
		height: vh('apertureY');
		top: vh('apertureTop');
		left: calc(50% + #{vh('descLeftOffset')});
		&:first-of-type {
			left: calc(50% - #{vh('ascLeftOffset')});
		}
		@include vendor-prefix(transform-style, 'preserve-3d', property, $vendorPrefixes);
		@include vendor-prefix(transform, translateZ(vh('roomZ', '-')), property, $vendorPrefixes);

		& > .top, & > .bottom {
			height: vh('apertureZ')
		}
		& > .left, & >.right {
			width: vh('apertureZ');
		}
	}
}


/// Queue of cages
q {
	@include vendor-prefix(transform, translateZ(vh('apertureZ', '-')), property, $vendorPrefixes);
	width: 100%;
	height: 100%;
	overflow: hidden;
	background: black(.80);
	position: relative;
	&.asc {
		@include perspective(90%, (100 - (m('eyeY') / m('roomY') * 100)) * 1%, vh('perspectiveZ'));
		//@include perspective(50%, (100 - (m('eyeY') / m('roomY') * 100)) * 1%, vh('perspectiveZ'));
		u:first-of-type {
			//animation: pnMoveUp 20s infinite linear;
		}
	}
	&.desc {
		@include perspective(10%, (100 - (m('eyeY') / m('roomY') * 100)) * 1%, vh('perspectiveZ'));
		//@include perspective(50%, (100 - (m('eyeY') / m('roomY') * 100)) * 1%, vh('perspectiveZ'));
		u:first-of-type {
			//animation: pnMoveDown 20s infinite linear;

			// @todo fix margin
			//margin-top: -760px
		}
	}
}


/// Units (=cages + skirting)
u {
	transform-style: preserve-3d;
	/// top/bottom,  front face
	&::before, &::after {
		content: '';
		position: absolute;
		width: vh('cageInnerX');
		height: vh('cageBoardThickness');
		left: vh('cageBoardThickness');
	}
	&::before {
		top: vh('cageTopBottomBoardOffset');
	}
	&::after {
		bottom: vh('cageTopBottomBoardOffset');
	}

	// top/bottom outside
	& > .upside, & > .downside {
		height: vh('cageOuterZ');
		width: vh('cageOuterX');
	}
	& > .upside {
		top: vh('cageTopBottomBoardOffset');
	}
	& > .downside {
		bottom: vh('cageTopBottomBoardOffset');
	}

	i {
		width: vh('cageInnerX');
		height: vh('cageInnerY');
		position: relative;
		transform-style: preserve-3d;
		margin: vh('cageBoardThickness');
		/// cage  front face, left + right
		&::before, &::after {
			content: '';
			position: absolute;
			height: vh('cageOuterY');
			width: vh('cageBoardThickness');
			top: vh('cageBoardThickness', '-');
		}
		&::before {
			left: vh('cageBoardThickness', '-');
		}
		&::after {
			right: vh('cageBoardThickness', '-');
		}
		& > .top, & > .bottom {
			height: vh('cageInnerZ');
			width: vh('cageInnerX');
		}
		& > .left, & > .right {
			width: vh('cageInnerZ');
			height: vh('cageInnerY');
		}
		& > .back, & > .front {
			width: vh('cageInnerX');
			height: vh('cageInnerY');
		}
		& > .back {
			@include vendor-prefix(transform, translateZ(vh('cageInnerZ', '-')), property, $vendorPrefixes);
		}
	}

	// skirting above/below cage
	sup, sub {
		width: vh('skirtingX');
		height: vh('skirtingY');
		margin: auto;
		transform-style: preserve-3d;
		&::before {
			content: '';
			width: inherit;
			height: inherit;
			border-radius: inherit;
			position: absolute;
			display:block;
			left: -3px;
			@include vendor-prefix(transform, translateZ(vh('cageBoardThickness', '-')), property, $vendorPrefixes);
			background: inherit;
			box-shadow: inset 6px 0px 5px 0px black(.46);
		}
		s {
			border-radius: inherit;
		}
	}
	sup {
		border-radius: vh('skirtingRadius') vh('skirtingRadius') 0 0;
		margin-top: vh('skirtingOverlap', '-');
		@include vendor-prefix(transform, translateZ(vh('upperSkirtingZ', '-')), property, $vendorPrefixes);
	}
	sub {
		border-radius: 0 0 vh('skirtingRadius') vh('skirtingRadius');
		@include vendor-prefix(transform, translateZ(vh('lowerSkirtingZ', '-')), property, $vendorPrefixes);
		box-shadow: 0 5px 3px 0 black(.45)
	}
}

/// dirty, this one
.asc u  {
	sub, sup {
		&::before  {
			left: auto;
			box-shadow: inset -6px 0px 5px 0px black(.46);
			right: -3px
		}
	}
}

