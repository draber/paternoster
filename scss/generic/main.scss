@import 'inc/bootstrap';
@import 'inc/base';
@import 'inc/keyframes';


body {
    background: url(img/wallpaper.gif);
}

.paternoster {
    @include aspect-ratio($canvasMaxX, $canvasMaxY);
    margin: auto;
    max-width: $canvasMaxX * 1px;
    overflow: hidden;

    // No point for semantic markup in page that doesn't contain any text.
    // Thus the meaning of the elements in this context are:
    // ul = uncanny lift
    // li = lift side
    //  u = unit
    //  i = inner part of a unit
    //  b = board
    //  s = shadow
    ul, li, u, i, b, s {
        display: block;
        padding: 0;
        margin: 0;
        list-style: none;
    }

    ul {
        @include flex-container();
        li {
            @include simple-flex-box(relativeWidth($cageOuterWidth, $canvasMaxX));
            @include simple-border(black(.7));
            height: 100%;
            u {
                width: 100%;
                height: 100%;
                padding: relativeWidth($cageMaterialThickness, $cageOuterWidth);
                position: relative;
                //box-shadow: 2px 2px 2px 2px black(.3);
                &::before, &::after {
                    content: '';
                    position: absolute;
                    left: relativeWidth($cageMaterialThickness, $cageOuterWidth);
                    width: relativeWidth($cageInnerWidth, $cageOuterWidth);
                    // while this works it should actually bot be divided by 2
                    height: relativeWidth($cageMaterialThickness / 2, $cageOuterWidth);
                    z-index: 2;
                    border-left: 1px black(.7) solid;
                    border-right: 1px black(.7) solid;
                }
                &::before {
                    top: 0;
                }
                &::after {
                    bottom: 0;
                }

                @include vendor-prefix(perspective-origin, 50% 50%, property, (-webkit-, ''));
                animation: pnMoveDownPersp 10s linear infinite;
                s {
                    position: absolute;
                    width: 100%;
                    height: 100%;
                }
            }
        }

        .asc {
            margin-right: (100 - ($cageOuterWidth * 100 / $canvasMaxX) * 2) * 1%;
            u {
                &:first-of-type {
                    margin-top: 0%;
                    //animation: pnMoveUp 10s linear infinite;
                }
            }
        }

        .desc {
            u {
                &:first-of-type {
                    margin-top: 0;
                    //animation: pnMoveDown 10s linear infinite;
                }
            }
        }
    }

    i {
        height: 100%;
        width: 100%;
        background: #efefef;

        @include vendor-prefix(perspective, 800px, property, (-webkit-, ''));
        @include vendor-prefix(transform-style, preserve-3d, property, (-webkit-, ''));
        @include vendor-prefix(backface-visibility, visible, property, (-webkit-, ''));
        //	@include vendor-prefix(perspective-origin, 50% 50%, property, (-webkit-, ''));
        b {
            display: block;
            position: absolute;
            width: 100%;
            border: 1px black(.2) solid;

            &.vertical {
                height: 100%;
                &.right {
                    border-right-color: black(.7);
                }
                &.left {
                    border-left-color: black(.7);
                }
                &.back {
                }
                &.front {
                }
            }

            &.horizontal {
                width: 100%;
                // on given
                height: relativeWidth($cageInnerWidth, $cageInnerHeight);
                &.top {
                }
                &.bottom {
                }
            }

            &.back {
                @include vendor-prefix(transform, rotateY(180deg) translateZ($cageDepth * 1px), property, (-webkit-, ''));
            }

            &.right {
                @include vendor-prefix(transform-origin, right center, property, (-webkit-, ''));
                @include vendor-prefix(transform, rotateY(-90deg), property, (-webkit-, ''));
            }

            &.left {
                @include vendor-prefix(transform-origin, left center, property, (-webkit-, ''));
                @include vendor-prefix(transform, rotateY(90deg), property, (-webkit-, ''));
            }

            &.top {
                @include vendor-prefix(transform-origin, top center, property, (-webkit-, ''));
                @include vendor-prefix(transform, rotateX(-90deg), property, (-webkit-, ''));
            }

            &.bottom {
                top: auto;
                bottom: 0;
                @include vendor-prefix(transform-origin, bottom center, property, (-webkit-, ''));
                @include vendor-prefix(transform, rotateX(90deg), property, (-webkit-, ''));
            }
        }

    }
}


