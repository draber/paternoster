@import 'inc/bootstrap';
@import 'inc/base';
@import 'inc/keyframes';

.paternoster-room {
	/// Walls

	width: 100vw;
	height: 100vh;
	overflow:hidden;
	position: relative;
	@include perspective(50%, (100 - (m('eyeY') / m('roomY') * 100)) * 1%, 250vh);

	& > .back {
		background: url(img/wallpaper.png);
		height: 100vh;
		width: 200vw;
		left: -50%;
		@include vendor-prefix(transform, translateZ(vh('roomZ', '-')), property, $vendorPrefixes);
	}

	& > .top, & > .bottom {
		width: 200%;
		left: -50%;
	}

	& > .top {
		background: silver;
		height: vh('roomZ');
	}

	& > .bottom {
		background: url(img/floortile.png);
		height: calc(#{vh('roomZ')} + #{vh('apertureZ')});
	}

	/// S'kirting Board
	kbd {
		bottom:0;
		position:absolute;
		height: vh('baseBoardHeight');
		@include vendor-prefix(transform, translateZ(vh('roomZ', '-')), property, $vendorPrefixes);
		background: linear-gradient(to bottom, white(0.3) 0%, transparent 19%, transparent 100%),
			#845E45 url("themes/wood/img/top-bottom.jpg") repeat-x;
		box-shadow: 0 2px 1px 0 black(.45);
		&:nth-of-type(1) {
			width: calc(100vw - #{vh('baseBoardLargeWidth')});
			left:  -50vw;
		}
		&:nth-of-type(2) {
			width: vh('baseBoardSmallWidth');
			left: calc(50vw - #{vh('baseBoardSmallOffset')});
		}
		&:nth-of-type(3) {
			width: calc(100vw - #{vh('baseBoardLargeWidth')});
			right: -50vw;
		}
	}


	/// Aperture
	a {
		width: vh('apertureX');
		height: vh('apertureY');
		top: vh('apertureTop');
		left: calc(50% + #{vh('descLeftOffset')});
		&:first-of-type {
			left: calc(50% - #{vh('ascLeftOffset')});
		}

		//@todo remove border?
		border: 1px solid black(.3);
		border-bottom: none;
		
		@include vendor-prefix(transform-style, 'preserve-3d', property, $vendorPrefixes);
		@include vendor-prefix(transform, translateZ(vh('roomZ', '-')), property, $vendorPrefixes);
		s {
			&.top, &.bottom {
				height: vh('apertureZ')
			}
			&.left, &.right {
				width: vh('apertureZ');
				border-bottom: 1px solid black(.3);
			}
			&.top {
				background: radial-gradient(ellipse farthest-corner at center, black(.35) 0%, black(.40) 75%);
			}
			&.right {
				background: linear-gradient(-14deg, transparent 0%, transparent 06%, black(.43) 100%);
			}
			&.left {
				background: linear-gradient(14deg, transparent 0%, transparent 06%, black(.43) 100%);
			}
		}
	}


	/// Queue of cages
	a:first-of-type {
		q {
			@include perspective(90%, (100 - (m('eyeY') / m('roomY') * 100)) * 1%, 200vh);
			u:first-of-type {
				//animation: pnMoveUp 20s infinite linear;
				margin-top: -200px;
			}
		}
	}

	q {
		@include vendor-prefix(transform, translateZ(vh('apertureZ', '-')), property, $vendorPrefixes);
		@include perspective(10%, (100 - (m('eyeY') / m('roomY') * 100)) * 1%, 200vh);
		width: 100%;
		height: 100%;
		overflow: hidden;
		background: saddlebrown;//url(themes/wood/img/front-back-sides.jpg);
		position: relative;
	}


	/// Units (=cages + skirting)
	u {
		transform-style: preserve-3d;
		&:first-of-type {
			//animation: pnMoveDown 20s infinite linear;
		}

		/// cage material thickness, top + bottom
		&::before, &::after {
			content: '';
			position: absolute;
			width: vh('cageInnerX');
			height: vh('cageBoardThickness');
			left: vh('cageBoardThickness');
			background: blueviolet;
		}
		&::before {
			top: vh('cageTopBottomBoardOffset');
		}
		&::after {
			bottom: vh('cageTopBottomBoardOffset');
		}
	}

	i {
		/// cage material thickness, left + right
		&::before, &::after {
			content: '';
			position: absolute;
			height: vh('cageOuterY');
			width: vh('cageBoardThickness');
			top: vh('cageBoardThickness', '-');
			background: greenyellow;
		}
		&::before {
			left: vh('cageBoardThickness', '-');
		}
		&::after {
			right: vh('cageBoardThickness', '-');
		}
		width: vh('cageInnerX');
		height: vh('cageInnerY');
		position: relative;
		transform-style: preserve-3d;
		margin: vh('cageBoardThickness');
	}


	b {
		&.top, &.bottom {
			height: vh('cageInnerZ');
			width: vh('cageInnerX');
		}
		&.left, &.right {
			width: vh('cageInnerZ');
			height: vh('cageInnerY');
		}
		&.back, &.front {
			width: vh('cageInnerX');
			height: vh('cageInnerY');
		}

		&.top {
			background: yellow;
		}
		&.bottom {
			background: green;
		}
		&.right {
			background: blue;
		}
		&.left {
			background: red;
		}
		&.back {
			background: url(themes/wood/img/front-back-sides.jpg);
			@include vendor-prefix(transform, translateZ(vh('cageInnerZ', '-')), property, $vendorPrefixes);
		}
		s {
			position: absolute;
			width: 100%;
			height: 100%;
		}
	}
	sup, sub {
		width: vh('skirtingX');
		height: vh('skirtingY');
		margin: auto;

		background: url("themes/wood/img/top-bottom.jpg") ;
		box-shadow: 0 5px 3px 0 black(.45)
	}
	sup {
		border-radius: vh('skirtingRadius') vh('skirtingRadius') 0 0;
		margin-top: vh('skirtingOverlap', '-');
		background-color: #666;
		@include vendor-prefix(transform, translateZ(vh('upperSkirtingZ', '-')), property, $vendorPrefixes);
	}
	sub {
		border-radius: 0 0 vh('skirtingRadius') vh('skirtingRadius');
		background-color: #999;
		@include vendor-prefix(transform, translateZ(vh('lowerSkirtingZ', '-')), property, $vendorPrefixes);
	}
}