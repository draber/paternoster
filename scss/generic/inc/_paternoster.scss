@import './bootstrap';
@import './keyframes';

.paternoster {
	@include aspect-ratio($canvasMaxX, $canvasMaxY);
	margin: auto;
	max-width: $canvasMaxX * 1px;
	max-height: 88%;
	overflow: hidden;
	position: relative;
	z-index: 50;

	// No point for semantic markup in page that doesn't contain any text.
	// Thus the meaning of the elements in this context are:
	//    ul = uncanny lift
	//    li = lift side
	// aside = a side
	//     u = unit
	//     i = inner part of a unit
	//     b = board
	//     s = shadow
	ul, li, aside, u, i, b, s {
		display: block;
		padding: 0;
		margin: 0;
		list-style: none;
	}

	ul {
		@include flex-container();
	}
	li {
		@include simple-flex-box(relativeWidth($cageOuterWidth, $canvasMaxX));
		height: 100%;
	}

	u {
		width: 100%;
		height: 100%;
		position: relative;
		border-bottom:none;

		u {
			height: 100%;
			padding: relativeWidth($cageMaterialThickness, $cageOuterWidth);
			position: relative;
			border: none;

			// @toto
			transform: translateZ(-54px);


			&::before, &::after {
				content: '';
				position: absolute;
				left: relativeWidth($cageMaterialThickness, $cageOuterWidth);
				width: relativeWidth($cageInnerWidth, $cageOuterWidth);
				// while this works it should actually not be divided by 2
				height: relativeWidth($cageMaterialThickness / 2, $cageOuterWidth);
				z-index: 52;
				border-left: 1px black(.7) solid;
				border-right: 1px black(.7) solid;
			}
			&::before {
				top: 0;
				border-bottom: 1px black(.3) solid;
			}
			&::after {
				bottom: 0;
				border-top: 1px black(.3) solid;
			}

			& > s {
				margin-top: relativeWidth($cageMaterialThickness, $cageOuterWidth, false);
				margin-left: relativeWidth($cageMaterialThickness, $cageOuterWidth, false);
				z-index: 53;
			}
			b {
				&.right, &.left, &.back, &.front {
					width: 100%;
					height: 100%;
				}

				&.top, &.bottom {
					height: relativeWidth($cageInnerWidth, $cageInnerHeight);
				}

				&.back {
					@include vendor-prefix(transform, rotateY(180deg) translateZ($cageDepth * 1px), property, $vendorPrefixes);
				}
			}
		}

		@include vendor-prefix(perspective-origin, 50% 50%, property, $vendorPrefixes);
		s {
			position: absolute;
			width: 100%;
			height: 100%;
		}

		i {
			height: 100%;
			width: 100%;
			position: relative;
			z-index: 54;

			@include vendor-prefix(perspective, 800px, property, $vendorPrefixes);
			@include vendor-prefix(transform-style, preserve-3d, property, $vendorPrefixes);
			@include vendor-prefix(backface-visibility, visible, property, $vendorPrefixes);
		}
		b {
			display: block;
			position: absolute;
			width: 100%;

			&.right, &.left, &.back, &.front {
				height: 100%;
				width: 18%;
			}

			&.top, &.bottom {
				height: 9%;
			}

			&.top {
				@include vendor-prefix(transform-origin, top center, property, $vendorPrefixes);
				@include vendor-prefix(transform, rotateX(-90deg), property, $vendorPrefixes);
				background: radial-gradient(ellipse farthest-corner at center, black(.35) 0%, black(.40) 75%);
				border-left: 1px solid black(.4);
				border-right: 1px solid black(.4)
			}

			&.right {
				border-right-color: black(.7);
				@include vendor-prefix(transform-origin, right center, property, $vendorPrefixes);
				@include vendor-prefix(transform, rotateY(-90deg), property, $vendorPrefixes);
				left: auto;
				right: 0;
				background: linear-gradient(-14deg, transparent 0%, transparent 96%, black(.43) 100%),
				linear-gradient(0deg, black(.25), black(.38)),
				url(img/wallpaper.png);
			}
			&.left {
				border-left-color: black(.7);
				@include vendor-prefix(transform-origin, left center, property, $vendorPrefixes);
				@include vendor-prefix(transform, rotateY(90deg), property, $vendorPrefixes);
				background: linear-gradient(14deg, transparent 0%, transparent 96%, black(.43) 100%),
				linear-gradient(0deg, black(.25), black(.38)),
				url(img/wallpaper.png);
			}

			&.bottom {
				top: auto;
				bottom: 0;
				@include vendor-prefix(transform-origin, bottom center, property, $vendorPrefixes);
				@include vendor-prefix(transform, rotateX(90deg), property, $vendorPrefixes);
				background: linear-gradient(180deg, black(.15), transparent), url(img/floortile.png);
				border-left: 1px solid black(.2);
				border-right: 1px solid black(.2);
			}
		}
	}

	.asc {
		margin-right: (100 - ($cageOuterWidth * 100 / $canvasMaxX) * 2) * 1%;
		u {
			&:first-of-type {
				margin-top: 0%;
			}
		}
	}

	.desc {
		u {
			&:first-of-type {
				margin-top: 0;
			}
		}
	}
}
