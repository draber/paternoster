@import './bootstrap';
@import './keyframes';

.paternoster {
	@include aspect-ratio($canvasMaxX, $canvasMaxY);
	margin: 6% auto;
	max-width: $canvasMaxX * 1px;
	max-height: 88%;
	overflow: hidden;

	// No point for semantic markup in page that doesn't contain any text.
	// Thus the meaning of the elements in this context are:
	// ul = uncanny lift
	// li = lift side
	//  u = unit
	//  i = inner part of a unit
	//  b = board
	//  s = shadow
	ul, li, u, i, b, s {
		display: block;
		padding: 0;
		margin: 0;
		list-style: none;
	}

	ul {
		@include flex-container();
		li {
			@include simple-flex-box(relativeWidth($cageOuterWidth, $canvasMaxX));
			@include simple-border(black(.3));
			height: 100%;
			u {
				width: 100%;
				height: 100%;
				padding: relativeWidth($cageMaterialThickness, $cageOuterWidth);
				position: relative;
				//box-shadow: 2px 2px 2px 2px black(.3);
				&::before, &::after {
					content: '';
					position: absolute;
					left: relativeWidth($cageMaterialThickness, $cageOuterWidth);
					width: relativeWidth($cageInnerWidth, $cageOuterWidth);
					// while this works it should actually not be divided by 2
					height: relativeWidth($cageMaterialThickness / 2, $cageOuterWidth);
					z-index: 2;
					border-left: 1px black(.7) solid;
					border-right: 1px black(.7) solid;
				}
				&::before {
					top: 0;
					border-bottom: 1px black(.3) solid;
				}
				&::after {
					bottom: 0;
					border-top: 1px black(.3) solid;
				}

				@include vendor-prefix(perspective-origin, 50% 50%, property, $vendorPrefixes);
				animation: pnMoveDownPersp 10s linear infinite;
				s {
					position: absolute;
					width: 100%;
					height: 100%;
				}

				& > s {
					margin-top: relativeWidth($cageMaterialThickness, $cageOuterWidth, false);
					margin-left: relativeWidth($cageMaterialThickness, $cageOuterWidth, false);
					z-index: 3;
				}


				i {
					height: 100%;
					width: 100%;
					position: relative;
					z-index: 4;

					@include vendor-prefix(perspective, 800px, property, $vendorPrefixes);
					@include vendor-prefix(transform-style, preserve-3d, property, $vendorPrefixes);
					@include vendor-prefix(backface-visibility, visible, property, $vendorPrefixes);
					//	@include vendor-prefix(perspective-origin, 50% 50%, property, $vendorPrefixes);
					b {
						display: block;
						position: absolute;
						width: 100%;

						&.right, &.left, &.back, &.front {
							height: 100%;
						}

						&.top, &.bottom {
							height: relativeWidth($cageInnerWidth, $cageInnerHeight);
						}

						&.right {
							border-right-color: black(.7);
							@include vendor-prefix(transform-origin, right center, property, $vendorPrefixes);
							@include vendor-prefix(transform, rotateY(-90deg), property, $vendorPrefixes);
							left: auto;
							right: 0;
						}
						&.left {
							border-left-color: black(.7);
							@include vendor-prefix(transform-origin, left center, property, $vendorPrefixes);
							@include vendor-prefix(transform, rotateY(90deg), property, $vendorPrefixes);
						}

						&.top {
							@include vendor-prefix(transform-origin, top center, property, $vendorPrefixes);
							@include vendor-prefix(transform, rotateX(-90deg), property, $vendorPrefixes);
						}

						&.bottom {
							top: auto;
							bottom: 0;
							@include vendor-prefix(transform-origin, bottom center, property, $vendorPrefixes);
							@include vendor-prefix(transform, rotateX(90deg), property, $vendorPrefixes);
						}
					}

				}
			}
		}

		.asc {
			margin-right: (100 - ($cageOuterWidth * 100 / $canvasMaxX) * 2) * 1%;
			u {
				&:first-of-type {
					margin-top: 0%;
					//animation: pnMoveUp 10s linear infinite;
				}
			}
		}

		.desc {
			u {
				&:first-of-type {
					margin-top: 0;
					//animation: pnMoveDown 10s linear infinite;
				}
			}
		}
	}
}
